cmake_minimum_required(VERSION 3.14)
project (nodegl)

file (GLOB_RECURSE NODEGL_SRC_FILES src/*)
if (ENABLE_RENDERDOC_INTEGRATION)
    list (APPEND ${NODEGL_SRC_FILES} tools/renderdoc/*)
    set (NODEGL_CFLAGS "${NODEGL_CFLAGS} -DENABLE_RENDERDOC_CAPTURE")
endif()
file (GLOB_RECURSE NODEGL_NGFX_BACKEND_SRC_FILES porting/ngfx/*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${NODEGL_SRC_FILES} ${NODEGL_NGFX_BACKEND_SRC_FILES})

#-Wall -DBACKEND_GL -DBACKEND_VK
set (NODEGL_CFLAGS -DBACKEND_NGFX -fPIC -g)
if ( ${CMAKE_SYSTEM_NAME} MATCHES "Linux") 
set (NODEGL_CFLAGS ${NODEGL_CFLAGS} -DHAVE_GLPLATFORM_EGL -DTARGET_LINUX)
set(NODEGL_BUILD_TYPE SHARED)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
set (NODEGL_CFLAGS ${NODEGL_CFLAGS} -DHAVE_GLPLATFORM_WGL -DTARGET_WINDOWS)
set(NODEGL_BUILD_TYPE STATIC)
endif()
add_library(nodegl ${NODEGL_BUILD_TYPE} ${NODEGL_SRC_FILES}
    ${NODEGL_NGFX_BACKEND_SRC_FILES}
)
target_compile_options(nodegl PUBLIC ${NODEGL_CFLAGS} ${NGFX_CFLAGS})
target_link_libraries(nodegl PUBLIC 
    ${SXPLAYER_LIBRARIES}
#    ${VULKANSDK_LIBRARIES}
#    ${SHADERC_LIBRARIES}
    ${OPENGL_LIBRARIES}
    ${NGFX_LIBRARIES}
    ${SHADER_TOOLS_LIBRARIES}
)
target_link_directories(nodegl PUBLIC 
    ${VULKANSDK_LIBRARY_DIRS}
)
target_include_directories(nodegl PUBLIC
    src
    ${SXPLAYER_INCLUDE_DIRS}
    ${VULKANSDK_INCLUDE_DIRS}
    ${OPENGL_INCLUDE_DIR}
    ${NGFX_INCLUDE_DIRS}
    ${SHADER_TOOLS_INCLUDE_DIRS}
    ${JSON_INCLUDE_DIRS}
    ${RENDERDOC_INCLUDE_DIRS}
)
